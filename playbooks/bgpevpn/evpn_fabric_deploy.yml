---
- name: Deploy BGP EVPN Fabric Configuration
  hosts: localhost
  gather_facts: false
  vars_files:
    - ./vars/fabric_overlay_topology_localdevices.yml
    - ../credentials.yml
  vars:
    output_dir: ./rendered
    dnac_credentials_file: ../credentials.yml

  tasks:
        - name: Ensure rendered output directory exists
          ansible.builtin.file:
            path: "{{ output_dir }}"
            state: directory
            mode: '0755'

        - name: Build flattened role -> devices structure
          ansible.builtin.set_fact:
            role_devices: "{{ role_devices | default({}) | combine({ item.key: (item.value | map(attribute='devices') | list | flatten(levels=1)) }) }}"
          loop: "{{ fabric_devices | dict2items }}"
          loop_control:
            loop_var: item
        
        - name: Debug role_devices structure
          ansible.builtin.debug:
            var: role_devices

        - name: Debug role_template_map
          ansible.builtin.debug:
            var: role_template_map

        - name: Sanity check role_template_map defined
          ansible.builtin.assert:
            that:
              - role_template_map is defined
              - role_template_map | length > 0
            fail_msg: "role_template_map is undefined or empty; cannot select templates"

        - name: Check template files exist
          ansible.builtin.stat:
            path: "{{ item }}"
          loop: "{{ role_template_map.values() | list }}"
          register: template_stats

        - name: Build missing template list (no jmespath)
          ansible.builtin.set_fact:
            missing_templates: >-
              {{ template_stats.results
                 | selectattr('stat.exists','equalto', False)
                 | map(attribute='invocation')
                 | map(attribute='module_args')
                 | map(attribute='path')
                 | list }}

        - name: Assert all template files found
          ansible.builtin.assert:
            that:
              - missing_templates | length == 0
            fail_msg: "Missing template files: {{ missing_templates }}"

        - name: Build render item pairs (role/device) for debug
          ansible.builtin.set_fact:
            render_items: "{{ role_devices | dict2items | subelements('value') }}"

        - name: Debug planned render items count
          ansible.builtin.debug:
            msg: "Will render {{ render_items | length }} device configs"

        - name: Debug first 3 render items
          ansible.builtin.debug:
            var: render_items[0:3]

        - name: Render configs for all devices
          ansible.builtin.template:
            src: "{{ (role_template_map[item.0.key] if (role_template_map is defined and item.0.key in role_template_map) else ('bgp_evpn_fabric_' ~ item.0.key ~ '_cli.j2')) }}"
            dest: "{{ output_dir }}/{{ item.1.device_name }}-{{ item.0.key }}.cfg"
          with_subelements:
            - "{{ role_devices | dict2items }}"
            - value
            - skip_missing: True
          loop_control:
            label: "{{ item.1.device_name }} ({{ item.0.key }})"
          vars:
            vars:
            peer_policy_template: "{{ peer_policy[item.0.key] }}"
            peer_session_template: "{{ peer_session[item.0.key] }}"
            dhcp_source_interface: "{{ router_id_interface }}"
            neighbor: "{{ item.1.neighbors | default([]) }}"
            loopback_ip: "{{ item.1.loopback_ip }}"
            device_mgmt_ip: "{{ item.1.mgmt_ip }}"
            device_username: "{{ item.1.username }}"
            device_password: "{{ item.1.password }}"

        - name: Display rendered files list
          ansible.builtin.command: ls -1 {{ output_dir }}
          register: ls_output

        - name: Show rendered config file names
          ansible.builtin.debug:
            var: ls_output.stdout_lines

        - name: Read rendered configs content
          ansible.builtin.slurp:
            src: "{{ output_dir }}/{{ item }}"
          loop: "{{ ls_output.stdout_lines }}"
          register: rendered_files

        - name: Include DNAC credentials (if available)
          ansible.builtin.include_vars:
            file: "{{ dnac_credentials_file }}"
          ignore_errors: true

        - name: Ensure evpn_push_items is defined
          ansible.builtin.set_fact:
            evpn_push_items: []
        - name: Push configs via DNAC template API (create ephemeral template per device)
          when: dnac_host is defined
          block:
            - name: Build push payload list
              ansible.builtin.set_fact:
                evpn_push_items: "{{ evpn_push_items | default([]) + [ { 'device_name': (item.item | regex_replace('-[^-]+\\.cfg$','')), 'config': (item.content | b64decode) } ] }}"
              loop: "{{ rendered_files.results }}"

        - name: Debug deployment configuration
          ansible.builtin.debug:
            msg: 
              - "Project: {{ proj_name }}"
              - "Template: {{ cfg.device_name }}-EVPN"
              - "Device: {{ cfg.device_name }}"
              - "Config length: {{ cfg.config | length }}"
          vars:
            proj_name: BGP_EVPN_FABRIC_AUTOGEN
          loop: "{{ evpn_push_items }}"
          loop_control:
            loop_var: cfg

        - name: Deploy each config using template_workflow_manager module
          vars:
            proj_name: BGP_EVPN_FABRIC_AUTOGEN
            state: merged
            language: JINJA
            soft_type: IOS-XE
            product_family: Switches and Hubs
          loop: "{{ evpn_push_items }}"
          loop_control:
            loop_var: cfg
          cisco.dnac.template_workflow_manager:
            dnac_host: "{{ dnac_host }}"
            dnac_port: "{{ dnac_port }}"
            dnac_username: "{{ dnac_username }}"
            dnac_password: "{{ dnac_password }}"
            dnac_verify: "{{ dnac_verify }}"
            dnac_version: "{{ dnac_version }}"
            state: "{{ state }}"
            config:
              - configuration_templates:
                  project_name: "{{ proj_name }}"
                  template_name: "{{ cfg.device_name }}-EVPN"
                  template_content: "{{ cfg.config }}"
                  version_description: "Auto-generated BGP EVPN fabric config"
                  language: "{{ language }}"
                  software_type:  "{{ soft_type }}"
                  device_types:
                    - product_family:  "{{ product_family }}"
              - deploy_template:
                  project_name: "{{ proj_name }}"
                  template_name: "{{ cfg.device_name }}-EVPN"
                  force_push: true
                  device_details:
                    device_hostnames:
                      - "{{ cfg.device_name }}"
                  template_parameters:
                    - param_name: "device_name"
                      param_value: "{{ cfg.device_name }}"
          register: dnac_push_results

        - name: Show DNAC push summary
          ansible.builtin.debug:
            msg: "Deployed {{ dnac_push_results.results | length }} templates via DNAC"
